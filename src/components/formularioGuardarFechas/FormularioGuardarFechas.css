import React, { useState } from 'react';
import Calendar from 'react-calendar';
import NavBar from '../navBar/NavBar';
import SideBar from '../sideBar/SideBar';
import "./VerFechas.css";
import { useParams } from 'react-router-dom';
//import { useForm } from "react-hook-form";
import { useContext } from "react";
import { Context } from "../context/Context";

const VerFechas = () => {
    const [value, onChange] = useState(new Date());
    const informacion = useContext(Context);

    const {_id} = useParams();
    //console.log(`Id que viene de cabañas: ${_id}`); 
    
    let cabaña = informacion.data.find((cab) =>  cab._id === _id)
    //console.log(cabaña); 


    const onSaveDates = async (e) => {
        //console.log("Save dates");

        e.preventDefault();

        const initialDate = new Date(value[0]).getDate();
        const endDate = new Date(value[1]).getDate();

        if(initialDate.toLocaleString() === endDate.toLocaleString()) {
            /* fetch("http://localhost:3000/days", { */
            await fetch(`http://localhost:5005/cabanas/update/${_id}`, {
                method: "PUT",
                headers: {
                    "Content-Type": "application/json"   
                },
                body: JSON.stringify({
                    available_days: 
                      new Date(value[0]).toDateString() === "Invalid Date" 
                        ? new Date(value).toDateString()
                        : new Date(value[0]).toDateString()
                })
            }).then((res) => res.json())
              .then((data) => {
                  console.log(`Devolucionnnn ${data}`)
              })
              .catch((err) => {
                  console.log(err);
              });
        }

        
        const date_1 = new Date(value[0]);
        const date_2 = new Date(value[1]);

        const totalDays = (date_1, date_2) => {
            const difference = date_1.getTime() - date_2.getTime();
            const days = Math.ceil((difference / (1000 * 3600 * 24)) * -1);
            return days;
        }

        const td = totalDays(date_1, date_2);
        

        for (let i = 0; i < td; i++) {
            const date = new Date(value[0]);
            date.setDate(date.getDate() + i);
            


            await fetch(`http://localhost:5005/cabanas/update/${_id}`, { 
                method: "PUT",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    available_days: date.toDateString()
                })
            }).then((res) => res.json())
              .then((data) => {
                  console.log(`DEVOLUCIONNNNN ${data.available_days}`)
              })
              .catch((err) => {
                  console.log(err);
              });
        }
    
    };



  /*  let cabaña = informacion.data.find((cab) =>  cab._id === _id)
      //console.log(cabaña);  */

    let disabledDates = cabaña.available_days.map((oneDate) => { 
      return new Date(oneDate);
    });
    //console.log(disabledDates);

    return (
      <> 
        <NavBar />
        <SideBar />

        <h2 className='titulo-ver-fechas'>Consultar fechas disponibles</h2>

        <div className='contenedor-calendario'>
            <Calendar className="calendario" tileDisabled={({date, view}) =>
                    (view === 'month') && // Block day tiles only
                    disabledDates.some(disabledDate =>
                    date.getFullYear() === disabledDate.getFullYear() &&
                    date.getMonth() === disabledDate.getMonth() &&
                    date.getDate() === disabledDate.getDate()
                    )} returnValue='range' selectRange onChange={onChange} />

                
                <button className='button-ver-fechas' type='submit' onClick={onSaveDates}>Guardar</button>
                
                {/* <form action={`http://localhost:5005/cabanas/update/${_id}`} method="POST">
                    <input type="text" value={disabledDates.push("May 19 2023")} />
                </form> */}

            {
                new Date(value[0]).toString() !== "Invalid Date" && (
                    <div>
                        <p>
                            <strong>Los datos seleccionados son: </strong>
                        </p>

                        <p>
                            <strong>Desde: </strong> {new Date(value[0]).toLocaleDateString()}
                        </p>

                        <p>
                            <strong>Hasta: </strong> {new Date(value[1]).toLocaleDateString()}
                        </p>
                    </div>
                )}
        </div>
     </>
    )
}

export default VerFechas;